# This prompt was based on that of paulirish, which was inspired by those of gf3, sindresorhus, alrra, and mathiasbynens

prompt_dir () {
	local pwd="$(pwd)"
	# replace $HOME in $pwd with "~" if under $HOME
	[[ "${pwd:0:${#HOME}}" = "$HOME" ]] && pwd="~${pwd:${#HOME}}"
	# if length of pwd is too long, remove directories from the beginning
	
	local git_prompt_len=0
	[[ -n "$ROPERDOT_GIT_PROMPT_LEN" ]] && git_prompt_len="$ROPERDOT_GIT_PROMPT_LEN" || git_prompt_len=0
	[[ -n "$ROPERDOT_HISTORY_BY_SESSION" ]] && history_len=$(( $(dirs -p | wc -l) + 2)) || history_len=0
	if [[ "$ROPERDOT_PROMPT_LINES" -eq 1 ]]; then
    	local max_len=$(( COLUMNS / 2 - ROPERDOT_BASE_PROMPT_LEN - git_prompt_len - history_len ))
    else
    	local max_len=$(( COLUMNS - ROPERDOT_BASE_PROMPT_LEN - git_prompt_len - history_len ))
    fi

 	if [[ ${#pwd} -gt $max_len ]]; then
		local new_pwd=${pwd#*/}
		until [[ "$new_pwd" = "$pwd" || ${#new_pwd} -le $max_len ]]; do
			pwd="$new_pwd"
			new_pwd="${pwd#*/}"
		done
		echo .../"$new_pwd"
	else
		echo "$pwd"
	fi
}

prompt_git () {
    # this is >5x faster than mathias's.

    [[ "$ROPERDOT_SHOW_GIT_PROMPT_INFO" != "true" ]] && return

	if [[ "$ROPERDOT_OS_ENV" = "darwin" ]]; then
		man git >/dev/null 2>&1 || return
	fi

    # check if we're in a git repo. (fast)
    if ! git rev-parse --is-inside-work-tree &>/dev/null; then
    	unset ROPERDOT_GIT_PROMPT_ON ROPERDOT_GIT_PROMPT_BRANCH ROPERDOT_GIT_PROMPT_DIRTY
    	export ROPERDOT_GIT_PROMPT_ON ROPERDOT_GIT_PROMPT_BRANCH ROPERDOT_GIT_PROMPT_DIRTY
    	return
    fi

    # check for what branch we're on. (fast)
    #   if HEAD isn’t a symbolic ref (typical branch),
    #   then get a tracking remote branch or tag
    #   otherwise get the short SHA for the latest commit
    #   lastly just give up.
    branch_name="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
        git describe --all --exact-match HEAD 2> /dev/null || \
        git rev-parse --short HEAD 2> /dev/null || \
        echo '(unknown)')";

    ## early exit for Chromium & Blink repo, as the dirty check takes ~5s
    ## also recommended (via goo.gl/wAVZLa ) : sudo sysctl kern.maxvnodes=$((512*1024))
    repo_url=$(git config --get remote.origin.url)
    if grep -q chromium.googlesource.com <<<"$repo_url"; then
        dirty=" ⁂"
    else
        # check if it's dirty (slow)
        #   technique via github.com/git/git/blob/355d4e173/contrib/completion/git-prompt.sh#L472-L475
        dirty=$(git diff --no-ext-diff --quiet --ignore-submodules --exit-code 2> /dev/null || echo -e "*")

        # mathias has a few more checks some may like:
        #    github.com/mathiasbynens/dotfiles/blob/a8bd0d4300/.bash_prompt#L30-L43
    fi

	export ROPERDOT_GIT_PROMPT_BRANCH="$branch_name"
	export ROPERDOT_GIT_PROMPT_ON=" on "
	export ROPERDOT_GIT_PROMPT_DIRTY="$dirty"
	export ROPERDOT_GIT_PROMPT_LEN=$((4 + ${#branch_name} + ${#dirty}))
}
    
set_prompts() {

    # Only show username and host if not in set of standard logins
	local host_style="" userhost_prompt="" userStyle="" show_user=true show_host=true login host
	ROPERDOT_BASE_PROMPT_LEN=2  # "> "
	
	local userhost="${USER}@${HOSTNAME}"
	for login in "${ROPERDOT_STANDARD_LOGINS[@]}"; do
		if [[ "$login" =~ ^re: ]]; then
			if [[ "$userhost" =~ ${login#re:} ]]; then
				unset show_user show_host
				local found_userhost=true
				break
			fi
		elif [[ "$login" = "$userhost" ]]; then
			unset show_user show_host
			local found_userhost=true
			break
		fi
	done
	if [[ -z "$found_userhost" ]]; then
		for host in "${ROPERDOT_STANDARD_HOSTS[@]}"; do
			if [[ "$HOSTNAME" = "$host" ]]; then
				unset show_host
				break
			fi
		done
	fi

	# Look for hostname in ROPERDOT_PROMPT_HOST_COLOR_OVERRIDES
	for hostcolor in "${ROPERDOT_PROMPT_HOST_COLOR_OVERRIDES[@]}"; do
		host="${hostcolor%:*}"
		if [[ "$HOSTNAME" = "$host" ]]; then
			local color="${hostcolor#*:}"
			host_style="${!color}"
			show_host=true
			break
		fi
	done

	if [[ -n "$show_user" ]]; then
		# Highlight the user name when logged in as root.
		if [[ "${USER}" == *"root" ]]; then
			userStyle="$PROMPT_USER_ROOT_COLOR";
		else
			userStyle="$ROPERDOT_PROMPT_USER_COLOR";
		fi

		userhost_prompt+="\[${userStyle}\]$USER\[$COLOR_RESET\]"
		[[ -n "$show_host" ]] && userhost_prompt+="\[${ROPERDOT_PROMPT_AT_COLOR}\]@\[$COLOR_RESET\]"
		ROPERDOT_BASE_PROMPT_LEN=$((ROPERDOT_BASE_PROMPT_LEN + ${#USER}))
	fi

	if [[ -n "$show_host" ]]; then
		[[ -z "$host_style" ]] && host_style=$ROPERDOT_PROMPT_HOST_COLOR
		userhost_prompt+="\[${host_style}\]$HOSTNAME\[$COLOR_RESET\]"
		ROPERDOT_BASE_PROMPT_LEN=$((ROPERDOT_BASE_PROMPT_LEN + ${#HOSTNAME}))
	fi
	
	if [[ -n "$userhost_prompt" ]]; then
		userhost_prompt+=" "
		ROPERDOT_BASE_PROMPT_LEN=$((ROPERDOT_BASE_PROMPT_LEN + 1))
	fi

	export ROPERDOT_BASE_PROMPT_LEN
	export userhost_prompt

    # ------------------------------------------------------------------
    # | Prompt string                                                  |
    # ------------------------------------------------------------------

	PS1="\[\033]0;\$(pwd)\007\]"  # terminal title (set to the current working directory)
	[[ -n "$ROPERDOT_HISTORY_BY_SESSION" ]] && PS1+="\[$ROPERDOT_PROMPT_HISTORY_COLOR\][\!]"
	PS1+="$userhost_prompt"        # username and/or host
	# working directory
   	PS1+="\[$ROPERDOT_PROMPT_DIR_COLOR\]\$(prompt_dir)\[$COLOR_RESET\]"  
    # Git repository information
    if [[ "$ROPERDOT_SHOW_GIT_PROMPT_INFO" = "true" ]]; then
    	PS1+="\[$ROPERDOT_PROMPT_GIT_ON_COLOR\]\${ROPERDOT_GIT_PROMPT_ON}\[$COLOR_RESET\]\[$ROPERDOT_PROMPT_GIT_BRANCH_COLOR\]\${ROPERDOT_GIT_PROMPT_BRANCH}\[$COLOR_RESET\]\[$ROPERDOT_PROMPT_GIT_DIRTY_COLOR\]\${ROPERDOT_GIT_PROMPT_DIRTY}\[$COLOR_RESET\]"
    fi
    # ending chevron plus additional chevrons for dir stack depth
    [[ $ROPERDOT_PROMPT_LINES = 2 ]] && PS1+="\n"
    PS1+="\[$PROMPT_CHEVRON_COLOR\]>\$(dir_stack_chevrons)\[$COLOR_RESET\] "

    export PS1

    # ------------------------------------------------------------------
    # | Subshell prompt string                                         |
    # ------------------------------------------------------------------

    export PS2="⚡ "

    # ------------------------------------------------------------------
    # | Debug prompt string  (when using `set -x`)                     |
    # ------------------------------------------------------------------

    # When debugging a shell script via `set -x` this tricked-out prompt is used.

    # The first character (+) is used and repeated for stack depth
    # Then, we log the current time, filename and line number, followed by function name, followed by actual source line

    # FWIW, I have spent hours attempting to get time-per-command in here, but it's not possible. ~paul
    export PS4='+ \011\e[1;30m\t\011\e[1;34m${BASH_SOURCE}\e[0m:\e[1;36m${LINENO}\e[0m \011 ${FUNCNAME[0]}:+\e[0;35m${FUNCNAME[0]}\e[1;30m()\e[0m:\011\011 }'


    # shoutouts:
    #   https://github.com/dholm/dotshell/blob/master/.local/lib/sh/profile.sh is quite nice.
    #   zprof is also hot.

}

set_prompts
unset set_prompts