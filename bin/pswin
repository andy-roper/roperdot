#!/usr/bin/env python3
"""
Description: Lists Windows processes similarly to ps -ef

Author: Andy Roper <andyroper42@gmail.com>
URL: https://github.com/andy-roper/roperdot
"""
import subprocess
import csv
import sys
import os

def format_memory(mem_str):
    """Clean up memory usage string"""
    # Remove quotes and commas, keep the K suffix
    return mem_str.replace(',', '').replace('"', '')

def get_current_user():
    """Get the current username"""
    return os.environ.get('USER') or os.environ.get('USERNAME') or 'user'

def help():
    print('''
pswin: Lists Windows processes similarly to ps -ef
Usage: pswin [-gu]
       pswin [-gu] <process-name-filter>
Options:
-g  Use generic 'user' instead of actual username
-u  Show only user-initiated processes
'''[1:-1])
    sys.exit(0)

# Parse arguments manually
generic_user = False
user_only = False
process_filter = None

for arg in sys.argv[1:]:
    if arg in ['--help', '-?', '-h']:
        help()
    elif arg.startswith('-') and not arg.startswith('--'):
        # Handle combined flags like -gu, -ug, etc.
        for char in arg[1:]:
            if char == 'g':
                generic_user = True
            elif char == 'u':
                user_only = True
            else:
                print(f"Unknown option: -{char}", file=sys.stderr)
                sys.exit(1)
    else:
        process_filter = arg

# Determine what to show for user processes
if generic_user:
    user_label = "user"
else:
    user_label = get_current_user()

# Print header
print(f"{'USER':<12} {'PID':>8} {'MEM':>10} {'CMD'}")

try:
    # Known system/service processes
    SYSTEM_PROCESSES = {
        'system', 'smss.exe', 'csrss.exe', 'wininit.exe', 
        'winlogon.exe', 'lsass.exe', 'services.exe'
    }
    
    SERVICE_PROCESSES = {
        'svchost.exe', 'spoolsv.exe', 'dwm.exe', 'audiodg.exe',
        'fontdrvhost.exe', 'conhost.exe', 'dllhost.exe',
        'runtimebroker.exe', 'searchindexer.exe', 'wuauclt.exe'
    }
    
    result = subprocess.run(['tasklist.exe', '/fo', 'csv'], 
                          capture_output=True, text=True, check=True)
    
    reader = csv.reader(result.stdout.splitlines())
    next(reader)  # Skip header
    
    for row in reader:
        if len(row) >= 5:
            image_name = row[0]
            pid = int(row[1])
            mem_usage = format_memory(row[4])  # Memory Usage is 5th column (index 4)
            
            # Filter if requested
            if process_filter and process_filter.lower() not in image_name.lower():
                continue
            
            # User classification
            image_lower = image_name.lower()
            if image_lower in SYSTEM_PROCESSES:
                user = "SYSTEM"
            elif image_lower in SERVICE_PROCESSES:
                user = "SERVICE"
            elif pid < 500:
                user = "SYSTEM"
            elif pid < 1000:
                user = "SERVICE"
            else:
                user = user_label
            
            # Skip system/service processes if -u flag is used
            if user_only and user in ["SYSTEM", "SERVICE"]:
                continue
            
            # Show meaningful columns only
            print(f"{user:<12} {pid:>8} {mem_usage:>10} {image_name}")
            
except subprocess.CalledProcessError as e:
    print(f"Error running tasklist: {e}", file=sys.stderr)
    sys.exit(1)