import_windows_terminal_color_schemes() {
	if ! type win_env_linux_path >/dev/null 2>&1; then
		. "${ROPERDOT_DIR}/source-scripts/win-env-functions"
	fi

    echo "Importing Roperdot color schemes into Windows Terminal settings..."

    local terminal_settings_file="$1"
    
    if [[ -z "$terminal_settings_file" ]]; then
		localappdata_wsl="$(win_env_linux_path LOCALAPPDATA)"

		# Try the most common location first
		terminal_settings_file="${localappdata_wsl}/Packages/Microsoft.WindowsTerminal_8wekyb3d8bbwe/LocalState/settings.json"

		# If not found, try the other location
		if [[ ! -f "$terminal_settings_file" ]]; then
		    terminal_settings_file="${localappdata_wsl}/Microsoft/Windows Terminal/settings.json"
		fi
	    
	    # Final check
	    if [[ ! -f "$terminal_settings_file" ]]; then
	        echo "Windows Terminal settings file not found"
	        return 1
	    fi
	fi
    
    # Path to our converted color schemes
    local color_schemes_dir="${ROPERDOT_DIR}/config/color-schemes/windows_terminal"
    
    # Create a temporary file for the updated settings
    local temp_settings=$(mktemp)
    
    # Start with the current settings, ensuring schemes array exists
    if ! /usr/bin/jq '.schemes //= []' "$terminal_settings_file" > "$temp_settings"; then
        echo "Error: Failed to read Windows Terminal settings file"
        rm -f "$temp_settings"
        return 1
    fi
    
    # Process each color scheme file
    for scheme_file in "$color_schemes_dir"/*.json; do
        if [[ -f "$scheme_file" ]]; then
            local scheme_name=$(basename "$scheme_file" .json)

            # Read the scheme JSON
            local scheme_json=
            if ! scheme_json=$(cat "$scheme_file"); then
                echo "Warning: Failed to read $scheme_file, skipping..."
                continue
            fi

            # Check if scheme already exists in settings
            local scheme_display_name=$(/usr/bin/jq -r '.name' "$scheme_file")
			local existing_scheme_index=$(/usr/bin/jq --arg name "$scheme_display_name" '.schemes | to_entries[] | select(.value.name == $name) | .key' "$temp_settings")
            
            if [[ -n "$existing_scheme_index" ]]; then
                # Update existing scheme
                if /usr/bin/jq --argjson scheme "$scheme_json" --argjson index "$existing_scheme_index" '.schemes[$index] = $scheme' "$temp_settings" > "${temp_settings}.tmp"; then
                    mv "${temp_settings}.tmp" "$temp_settings"
                    echo "Updated scheme $scheme_name"
                fi
            else
                # Add new scheme
                if /usr/bin/jq --argjson scheme "$scheme_json" '.schemes += [$scheme]' "$temp_settings" > "${temp_settings}.tmp"; then
                    mv "${temp_settings}.tmp" "$temp_settings"
                    echo "Added scheme $scheme_name"
                fi
            fi
        fi
    done
    
    # Validate the final JSON
    if ! /usr/bin/jq empty "$temp_settings" 2>/dev/null; then
        echo "Error: Generated settings file is not valid JSON"
        rm -f "$temp_settings"
        return 1
    fi
    
    # Create backup of original settings
    local backup_file="${terminal_settings_file}.roperdot-backup-$(date +%Y%m%d-%H%M%S)"
    if ! cp "$terminal_settings_file" "$backup_file"; then
        echo "Warning: Failed to create backup of settings file"
    else
        echo "Created backup: $backup_file"
    fi
    
    # Replace the original settings file
    if mv "$temp_settings" "$terminal_settings_file"; then
        echo "Successfully imported color schemes into Windows Terminal"
    else
        echo "Error: Failed to update Windows Terminal settings file"
        # Try to restore from backup if it exists
        if [[ -f "$backup_file" ]]; then
            cp "$backup_file" "$terminal_settings_file"
            echo "Restored original settings from backup"
        fi
        return 1
    fi
    
    # Clean up temp file if it still exists
    rm -f "$temp_settings"
    
    return 0
}
